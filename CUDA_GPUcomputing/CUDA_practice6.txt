%%cu
 #include <stdio.h>
 #include <stdlib.h> 
 #include <fcntl.h>
 #include <sys/stat.h>
 #include <chrono>

#define GRIDSIZE (16 * 1024)
#define BLOCKSIZE 1024
#define TOTALSIZE (GRIDSIZE * BLOCKSIZE) // 32MB needed! (8M * 4Bytes)

void genData(float* ptr, unsigned int size) {
    while (size--) {
        *ptr++ = (float)(rand() % 1000) / 1000.0F;
    }
}

__global__ void adjDiff(float* result, float* input) { 
    
    unsigned int i = blockIdx.x * blockDim.x + threadIdx.x; 
    
    if (i > 0) {
         float x_i = input[i]; 
         float x_i_m1 = input[i - 1];
         result[i] = x_i - x_i_m1; 
    } 
}

int main() {
    
    float* pSource = NULL;
    float* pResult = NULL;
    int i;
    
    pSource = (float*)malloc(TOTALSIZE * sizeof(float));
    pResult = (float*)malloc(TOTALSIZE * sizeof(float));

    genData(pSource, TOTALSIZE);

    float* pSourceDev = NULL;
    float* pResultDev = NULL;

    cudaMemcpy(pSourceDev, pSource, TOTALSIZE * sizeof(float), cudaMemcpyHostToDevice);

    pResult[0] = 0.0F;
    cudaMalloc((void**)&pSourceDev, TOTALSIZE * sizeof(float));
    cudaMalloc((void**)&pResultDev, TOTALSIZE * sizeof(float));

    std::chrono::system_clock::time_point start = std::chrono::system_clock::now();

    dim3 dimGrid(GRIDSIZE, 1, 1);
    dim3 dimBlock(BLOCKSIZE, 1, 1);
    adjDiff <<< dimGrid, dimBlock >>> (pResultDev, pSourceDev);

    cudaMemcpy(pResult, pResultDev, TOTALSIZE * sizeof(float), cudaMemcpyDeviceToHost);

    std::chrono::system_clock::time_point end = std::chrono::system_clock::now();
    std::chrono::nanoseconds duration_nano = end - start;

    printf("elapsed time = %lld nanosec\n", duration_nano);

    i = 1;
    printf("i=%7d: %f=%f-%f\n", i, pResult[i], pSource[i], pSource[i-1]);
    i = TOTALSIZE - 1;
    printf("i=%7d: %f=%f-%f\n", i, pResult[i], pSource[i], pSource[i-1]);
    i = TOTALSIZE / 2;
    printf("i=%7d: %f=%f-%f\n", i, pResult[i], pSource[i], pSource[i-1]);

    free(pSource);
    free(pResult);
    cudaFree(pSourceDev);
    cudaFree(pResultDev);
}