%%cu

#include <stdio.h>

#define width 5

__global__ void mulKernel(const int *a, const int *b, int *c) {

    int x = threadIdx.x;
    int y = threadIdx.y;
    int idx = y * (blockDim.x) + x;

    for(int k = 0; k < width; k++) {
        c[idx] += a[y * width + k] * b[k * width + x];
    }
    
}

int main() {
    const int arrA[width][width] = { 
        {1, 2, 3, 4, 5},
        {5, 4, 3, 2, 1},
        {1, 3, 5, 7, 9},
        {10, 9, 8, 7, 6},
        {6, 7, 8, 9, 10}
    };
    const int arrB[width][width] = {
        {6, 7, 8, 9, 10},
        {10, 9, 8, 7, 6},
        {2, 4, 6, 8, 10},
        {5, 4, 3, 2, 1},
        {1, 2, 3, 4, 5}
    };
    int arrC[width][width] = {0, };

    int *dev_a = 0;
    int *dev_b = 0;
    int *dev_c = 0;

    cudaMalloc((void**)&dev_c, width * width * sizeof(int));
    cudaMalloc((void**)&dev_a, width * width * sizeof(int));
    cudaMalloc((void**)&dev_b, width * width * sizeof(int));

    cudaMemcpy(dev_a, arrA, width * width * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(dev_b, arrB, width * width * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(dev_c, arrC, width * width * sizeof(int), cudaMemcpyHostToDevice);

    dim3 DimBlock(width, width);
    mulKernel<<<1, DimBlock>>>(dev_a, dev_b, dev_c);

    cudaMemcpy(arrC, dev_c, width * width * sizeof(int), cudaMemcpyDeviceToHost);

    for(int i = 0; i < width; i++) {
        for(int j = 0; j< width; j++) {
            printf(" %d ", arrC[i][j]);
        }
        printf("\n");
    }

    cudaFree(dev_a);
    cudaFree(dev_b);
    cudaFree(dev_c);

    return 0;      
}