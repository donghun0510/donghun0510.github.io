%%cu

#include <stdio.h>

__global__ void addKernel(int *d, const int *a, const int *b, const int *c) {
    int i = threadIdx.x;
    d[i] = a[i] + b[i] + c[i];
}

int main(void) {
    const int SIZE = 5;
    const int a[SIZE] = {1, 3, 5, 7, 9};
    const int b[SIZE] = {2, 4, 6, 8, 10};
    const int c[SIZE] = {10, 20, 30, 40, 50};
    int d[SIZE] = { 0 };

    int *dev_a = 0;
    int *dev_b = 0;
    int *dev_c = 0;
    int *dev_d = 0;

    cudaMalloc((void**)&dev_d, SIZE * sizeof(int));
    cudaMalloc((void**)&dev_a, SIZE * sizeof(int));
    cudaMalloc((void**)&dev_b, SIZE * sizeof(int));
    cudaMalloc((void**)&dev_c, SIZE * sizeof(int));

    cudaMemcpy(dev_a, a, SIZE * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(dev_b, b, SIZE * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(dev_c, c, SIZE * sizeof(int), cudaMemcpyHostToDevice);
    addKernel<<<1,SIZE>>>(dev_d, dev_a, dev_b, dev_c);

    cudaMemcpy(d, dev_d, SIZE * sizeof(int), cudaMemcpyDeviceToHost);

    printf("{1, 3, 5, 7, 9} + {2, 4, 6, 8, 10} + {10, 20, 30, 40, 50} = {%d, %d, %d, %d, %d}", d[0], d[1], d[2], d[3], d[4]);

    cudaFree(dev_d);
    cudaFree(dev_a);
    cudaFree(dev_b);
    cudaFree(dev_c);

    return 0;
}